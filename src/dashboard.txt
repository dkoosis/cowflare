<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RTM MCP Debug Dashboard</title>
    <style>
      body { font-family: -apple-system, system-ui, sans-serif; margin: 0; padding: 20px; background: #0f0f0f; color: #e0e0e0; }
      .container { max-width: 1600px; margin: 0 auto; }
      .deployment-banner { background: linear-gradient(135deg, #1e3a8a, #3b82f6); color: #e0f2fe; padding: 20px; border-radius: 12px; margin-bottom: 25px; text-align: center; border: 2px solid #60a5fa; box-shadow: 0 4px 12px rgba(96, 165, 250, 0.2); }
      .deployment-name { font-size: 28px; font-weight: bold; text-transform: uppercase; letter-spacing: 2px; }
      .deployment-time { font-size: 14px; opacity: 0.8; margin-top: 5px; }
      h1 { margin-bottom: 10px; color: #fff; }
      .subtitle { color: #888; margin-bottom: 20px; }
      .controls { background: #1a1a1a; padding: 15px; border-radius: 8px; margin-bottom: 20px; display: flex; gap: 10px; align-items: center; border: 1px solid #333; }
      button { background: #2d2d2d; color: #e0e0e0; border: 1px solid #444; padding: 8px 16px; border-radius: 4px; cursor: pointer; transition: background-color 0.2s; }
      button:hover { background: #3d3d3d; }
      .session-card { background: #1a1a1a; border: 1px solid #333; border-radius: 8px; padding: 20px; margin-bottom: 20px; transition: opacity 0.3s ease; }
      .session-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; cursor: pointer; }
      .session-header:hover h3 { color: #fff; }
      .session-title-group { display: flex; align-items: center; gap: 12px; }
      .session-actions { display: flex; gap: 8px; margin-left: auto; padding-left: 20px; }
      .action-btn { font-size: 12px; padding: 4px 10px; background-color: #334155; border-color: #475569; }
      .action-btn:hover { background-color: #475569; }
      .delete-btn { background-color: #450a0a; border-color: #991b1b; color: #f87171; }
      .delete-btn:hover { background-color: #7f1d1d; }
      .session-duration { color: #888; font-size: 14px; text-align: right; white-space: nowrap; }
      .event-row { display: grid; grid-template-columns: 180px 250px 200px 1fr; align-items: flex-start; gap: 15px; padding: 8px 0; border-bottom: 1px solid #2a2a2a; font-size: 14px; }
      .event-time { color: #888; font-family: 'SF Mono', Monaco, monospace; }
      .event-name { color: #4a9eff; font-weight: 500; }
      .event-name.mcp { color: #8b5cf6; }
      .event-endpoint { color: #bbb; font-family: 'SF Mono', Monaco, monospace; }
      .event-data { font-family: 'SF Mono', Monaco, monospace; font-size: 12px; background: #0a0a0a; padding: 8px; border-radius: 4px; border: 1px solid #2a2a2a; white-space: pre-wrap; overflow-x: auto; word-break: break-word; }
      .collapsed { display: none; }
      .status-indicator { display: inline-block; width: 10px; height: 10px; border-radius: 50%; }
      .status-success { background: #22c55e; } .status-error { background: #ef4444; } .status-pending { background: #fbbf24; }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚öôÔ∏è RTM MCP Debug Dashboard</h1>
        
        <div id="deployment-info"></div>
        
        <div class="subtitle"></div>
        
        <div class="controls">
            <button onclick="location.reload()">üîÑ Refresh</button>
            <button onclick="expandAll()">üìÇ Expand All</button>
            <button onclick="collapseAll()">üìÅ Collapse All</button>
            <span style="margin-left: auto; color: #888;">
                Last updated: <span id="current-time"></span>
            </span>
        </div>
        
        <div id="flows-container"></div>
    </div>

    <script>
        const flowData = __FLOW_DATA__;

        function formatTime(timestamp) {
            return new Date(timestamp).toLocaleString('en-US', {
                timeZone: 'America/New_York',
                month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', fractionalSecondDigits: 3
            });
        }
        
        function render() {
            // Render Deployment Banner
            const deploymentInfo = document.getElementById('deployment-info');
            const deploymentName = '__DEPLOYMENT_NAME__';
            const deploymentTime = '__DEPLOYMENT_TIME__';
            if (deploymentName) {
                deploymentInfo.innerHTML = `
                <div class="deployment-banner">
                    <div class="deployment-name">üöÄ ${deploymentName}</div>
                    <div class="deployment-time">Deployed: ${deploymentTime ? formatTime(new Date(deploymentTime).getTime()) : 'Unknown'}</div>
                    <div class="deployment-time">Current: ${formatTime(Date.now())}</div>
                </div>`;
            }

            // Render Flows
            const subtitle = document.querySelector('.subtitle');
            const flowsContainer = document.getElementById('flows-container');
            const oauthFlows = flowData.filter(flow => flow.events.some(e => e.event.includes('oauth') || e.event.includes('token')));
            
            subtitle.textContent = `Displaying the ${oauthFlows.length} most recent OAuth flows.`;

            if (oauthFlows.length === 0) {
                flowsContainer.innerHTML = `<div class="session-card"><p>No OAuth flows detected. Waiting for authentication attempts...</p></div>`;
            } else {
                flowsContainer.innerHTML = oauthFlows.map((flow, index) => `
                <div class="session-card" id="card-${flow.primarySessionId}">
                  <div class="session-header" onclick="toggleSession('${flow.primarySessionId}')">
                    <div class="session-title-group">
                      <span class="status-indicator ${
                        flow.hasMcpError ? 'status-error' :
                        flow.hasMcpRequest && flow.hasMcpTransport ? 'status-success' :
                        flow.hasToken ? 'status-pending' : 'status-error'
                      }"></span>
                      <h3>${deploymentName ? `${deploymentName} - ` : ''}Flow ${index + 1}</h3>
                      ${index === 0 ? '<span style="color: #90caf9; font-weight: bold;">LATEST</span>' : ''}
                    </div>
                    <div class="session-duration">
                      ${formatTime(flow.startTime)} - ${formatTime(flow.endTime)}
                      (${Math.round((flow.endTime - flow.startTime) / 1000)}s)
                    </div>
                    <div class="session-actions">
                      <button class="action-btn" onclick="event.stopPropagation(); exportFlow('${flow.primarySessionId}')">Export</button>
                      <button class="action-btn delete-btn" onclick="event.stopPropagation(); deleteFlow('${flow.primarySessionId}')">Delete</button>
                    </div>
                  </div>
                  <div id="session-${flow.primarySessionId}" class="collapsed">
                    ${flow.events.map(event => `
                      <div class="event-row">
                        <div class="event-time">${new Date(event.timestamp).toLocaleTimeString('en-US', { fractionalSecondDigits: 3 })}</div>
                        <div class="event-name ${event.event.startsWith('mcp_') ? 'mcp' : ''}">${event.event}</div>
                        <div class="event-endpoint">${event.endpoint || 'N/A'}</div>
                        <div class="event-data">${JSON.stringify(event.data, null, 2)}</div>
                      </div>
                    `).join('')}
                  </div>
                </div>`).join('');
            }
        }

        // Client-side functions
        function toggleSession(sessionId) {
            document.getElementById(`session-${sessionId}`)?.classList.toggle('collapsed');
        }

        function expandAll() {
            document.querySelectorAll('.collapsed').forEach(el => el.classList.remove('collapsed'));
        }

        function collapseAll() {
            document.querySelectorAll('[id^="session-"]').forEach(el => el.classList.add('collapsed'));
        }

        function exportFlow(primarySessionId) {
            const flow = flowData.find(f => f.primarySessionId === primarySessionId);
            if (!flow) return;
            const blob = new Blob([JSON.stringify(flow, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `flow-${primarySessionId}-logs.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        async function deleteFlow(primarySessionId) {
            if (!confirm('Are you sure you want to delete this entire flow?')) return;
            const flow = flowData.find(f => f.primarySessionId === primarySessionId);
            if (!flow) return;

            try {
                const response = await fetch('/debug/delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sessionIds: Array.from(flow.relatedSessions) }),
                });
                if (response.ok) {
                    document.getElementById(`card-${primarySessionId}`)?.remove();
                } else {
                    alert('Failed to delete logs.');
                }
            } catch (error) {
                console.error('Error deleting flow:', error);
                alert('An error occurred while deleting the logs.');
            }
        }
        
        // Initial Render
        document.addEventListener('DOMContentLoaded', () => {
            render();
            const timeEl = document.getElementById('current-time');
            if (timeEl) {
                timeEl.textContent = new Date().toLocaleString('en-US', { timeZone: 'America/New_York', hour: '2-digit', minute: '2-digit', second: '2-digit' });
                setInterval(() => {
                    timeEl.textContent = new Date().toLocaleString('en-US', { timeZone: 'America/New_York', hour: '2-digit', minute: '2-digit', second: '2-digit' });
                }, 1000);
            }
        });
    </script>
</body>
</html>